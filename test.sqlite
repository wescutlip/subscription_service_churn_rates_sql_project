-- Inspect dataset
SELECT *
FROM subscriptions
LIMIT 100;

-- Determining range of dates
SELECT MIN(subscription_start), 
  MAX(subscription_start)
FROM subscriptions;
-- DEC 2016 - Mar 2017, but churn can only be calculated from Jan 2017 onward since there are no cancellations in Dec due to minimum subscription length of 31 days

-- Creating temporary tables and calculating churn rate by segment
WITH months AS
(SELECT
  "2017-01-01" as first_day,
  "2017-01-31" as last_day
UNION
SELECT
  "2017-02-01" as first_day,
  "2017-02-28" as last_day
UNION
SELECT
  "2017-03-01" as first_day,
  "2017-03-31" as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months
),
status AS
(SELECT id, first_day AS "month", 
  CASE 
    WHEN (subscription_start < first_day)
      AND (subscription_end >= first_day OR 
      subscription_end IS NULL) 
      AND (segment = 87) THEN 1
    ELSE 0
  END AS "is_active_87",
  CASE 
    WHEN (subscription_end 
      BETWEEN first_day AND last_day) 
      AND (segment = 87) THEN 1
    ELSE 0
  END AS "is_cancelled_87",
  CASE 
    WHEN (subscription_start < first_day)
      AND (subscription_end >= first_day OR 
      subscription_end IS NULL) 
      AND (segment = 30) THEN 1
    ELSE 0
  END AS "is_active_30",
  CASE 
    WHEN (subscription_end 
      BETWEEN first_day AND last_day) 
      AND (segment = 30) THEN 1
    ELSE 0
  END AS "is_cancelled_30"
FROM cross_join),
status_aggregate AS
(SELECT month, SUM(is_active_87) AS "sum_active_87",
  SUM(is_cancelled_87) AS "sum_cancelled_87",
  SUM(is_active_30) AS "sum_active_30",
  SUM(is_cancelled_30) AS "sum_cancelled_30"
FROM status
GROUP BY month)
SELECT month,
  1.0 * sum_cancelled_87 / sum_active_87 
  AS "churn_87",
  1.0 * sum_cancelled_30 / sum_active_30 
  AS "churn_30"
FROM status_aggregate
GROUP BY month;
-- Segment 30 has substantially lower churn rates every month.
-- Churn rates for both segments go up in March, this may be worth looking into further.